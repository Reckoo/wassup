import Head from "next/head";
import Feed from "../Components/Feed";
import SideBar from "../Components/SideBar";
import { useSession } from "next-auth/react";
import Login from "../Components/Login";
import { useEffect, useState } from "react";
import Pusher from "pusher-js";

export default function Home({ fetchedData }) {
  // State for post data
  const [data, setData] = useState([]);

  //Using pusher for Realtime update of posts
  const pusher = new Pusher("2aff0481a48c3064e169", {
    cluster: "us2",
  });

  //Connecting or subscribing post channel in pusher
  const channel = pusher.subscribe("posts");

  //Using state to store fetched data from the database
  useEffect(() => {
    setData(fetchedData);
  }, [fetchedData]);

  //Listening for the insert and deleted actions in pusher
  useEffect(() => {
    //Listening for insert action and updating the value of the data state if any new post gets pushed to the database
    channel.bind("insert", (postData) => {
      setData([...fetchedData, postData]);
    });
    
    //Listening for deleted action and removing the deleted post from the data state
    channel.bind("deleted", (id) => {
      setData((current) =>
        current.filter((post) => {
          return post._id !== id;
        })
      );
    });
  }, [channel]);

  //User
  const { data: session } = useSession();

  return (
    <div className="bg-slate-50">
      <Head>
        <title>Wassup</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {/* Checking if user is signed in or not before showing feed */}
      {session ? (
        <div className="body bg-slate-50 h-full p-2 relative">
          <Feed posts={data} />
          <SideBar />
        </div>
      ) : (
        // Showing Login Component if the user is not signed in.
        <Login />
      )}
    </div>
  );
}

export async function getServerSideProps() {
  //Intializing the Base URL
  let baseUrl = process.env.BACKEND_API;
  //Fetching data from the database
  const data = await fetch(`${baseUrl}/api/posts`);
  const resp = await data.json();

  return {
    props: {
      fetchedData: resp,
    },
  };
}
